# index.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand
from telethon import errors
from telethon.sessions import StringSession
from telethon import TelegramClient # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–≤–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
from aiogram.filters import StateFilter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from db import Database
import utils

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8072580447:AAHVGhEKrJqyT2HuwcHYHxIi9TZDeiEFpHE"  # <-- –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
# -----------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

# FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ UserBot
class Login(StatesGroup):
    api_id = State()
    api_hash = State()
    phone = State()
    code = State()
    password = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ ---

@dp.message(CommandStart(), StateFilter("*"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º UserBot –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å UserBot.\n"
        "/join <—Å—Å—ã–ª–∫–∞> - –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
        "/send <id_—á–∞—Ç–∞> <—Ç–µ–∫—Å—Ç> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."
    )

@dp.message(Command("login"), StateFilter("*"))
async def cmd_login(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Login.api_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à `api_id`. –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org.", parse_mode="Markdown")

@dp.message(Login.api_id)
async def process_api_id(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `api_id`. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", parse_mode="Markdown")
    await state.update_data(api_id=int(message.text))
    await state.set_state(Login.api_hash)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à `api_hash`.", parse_mode="Markdown")

@dp.message(Login.api_hash)
async def process_api_hash(message: Message, state: FSMContext):
    if not message.text or not message.text.strip():
        return await message.answer("`api_hash` –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", parse_mode="Markdown")
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(Login.phone)
    await message.answer("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789).")

@dp.message(Login.phone)
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    if not phone_number.startswith('+'):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `+`.", parse_mode="Markdown")
        
    await state.update_data(phone=phone_number)
    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
    temp_client = TelegramClient(StringSession(), api_id, api_hash)
    await message.answer("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞...")
    
    try:
        await temp_client.connect()
        sent_code = await temp_client.send_code_request(phone_number)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        await state.update_data(phone_code_hash=sent_code.phone_code_hash, temp_session=temp_client.session.save())
        await state.set_state(Login.code)
        await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()
    finally:
        await temp_client.disconnect()

@dp.message(Login.code)
async def process_code(message: Message, state: FSMContext):
    await state.update_data(code=message.text.strip())
    data = await state.get_data()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    session_str = data.get('temp_session')
    temp_client = TelegramClient(StringSession(session_str), data['api_id'], data['api_hash'])
    
    try:
        await temp_client.connect()
        await temp_client.sign_in(
            phone=data['phone'],
            code=data['code'],
            phone_code_hash=data['phone_code_hash']
        )
        
        session_str_final = temp_client.session.save()
        db.save_session(message.from_user.id, data['api_id'], data['api_hash'], session_str_final)
        db.log_event("AUTH_SUCCESS", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")
        
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ —Å–µ—Å—Å–∏—è –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.clear()
        
    except errors.SessionPasswordNeededError:
        await state.set_state(Login.password)
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except errors.PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /login.")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()
    finally:
        if temp_client.is_connected():
            await temp_client.disconnect()

@dp.message(Login.password)
async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    temp_client = TelegramClient(StringSession(), data['api_id'], data['api_hash'])

    try:
        await temp_client.connect()
        await temp_client.sign_in(password=message.text.strip())

        session_str = temp_client.session.save()
        db.save_session(message.from_user.id, data['api_id'], data['api_hash'], session_str)
        db.log_event("AUTH_SUCCESS_2FA", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —Å 2FA.")
        
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        
    except errors.PasswordHashInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /login.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if temp_client.is_connected():
            await temp_client.disconnect()
        await state.clear()

@dp.message(Command("status"), StateFilter("*"))
async def cmd_status(message: Message, state: FSMContext):
    await state.clear()
    session_data = db.get_session(message.from_user.id)
    if not session_data:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
    
    api_id, api_hash, session_string = session_data
    try:
        client = await utils.get_userbot_client(message.from_user.id, api_id, api_hash, session_string)
        me = await client.get_me()
        # --- –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É ---
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="logout_userbot")]
            ]
        )
        await message.answer(
            f"‚úÖ UserBot –∞–∫—Ç–∏–≤–µ–Ω.\n–ê–∫–∫–∞—É–Ω—Ç: **{me.first_name}** (`@{me.username}`)",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –û—à–∏–±–∫–∞: {e}\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ: /login")

@dp.message(Command("join"), StateFilter("*"))
async def cmd_join(message: Message, state: FSMContext):
    await state.clear()
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/join <—Å—Å—ã–ª–∫–∞_–Ω–∞_—á–∞—Ç>`", parse_mode="Markdown")
    
    chat_link = args[1]
    
    session_data = db.get_session(message.from_user.id)
    if not session_data:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
        
    api_id, api_hash, session_string = session_data
    client = await utils.get_userbot_client(message.from_user.id, api_id, api_hash, session_string)
    
    await message.answer(f"‚è≥ –ü—ã—Ç–∞—é—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ `{chat_link}`...", parse_mode="Markdown")
    success, msg = await utils.join_chat(client, chat_link)
    
    event_type = "JOIN_SUCCESS" if success else "JOIN_FAIL"
    db.log_event(event_type, msg)
    
    await message.answer(msg)

@dp.message(Command("send"), StateFilter("*"))
async def cmd_send(message: Message, state: FSMContext):
    await state.clear()
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/send <id_—á–∞—Ç–∞_–∏–ª–∏_@username> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`", parse_mode="Markdown")
    
    chat_entity = parts[1]
    text_to_send = parts[2]
    
    session_data = db.get_session(message.from_user.id)
    if not session_data:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
    
    api_id, api_hash, session_string = session_data
    client = await utils.get_userbot_client(message.from_user.id, api_id, api_hash, session_string)

    await message.answer(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ `{chat_entity}`...", parse_mode="Markdown")
    success, msg = await utils.send_message(client, chat_entity, text_to_send)

    event_type = "SEND_SUCCESS" if success else "SEND_FAIL"
    db.log_event(event_type, msg)

    await message.answer(msg)

# === –ß–ê–¢–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ===
@dp.message(Command("scan"), StateFilter("*"))
async def cmd_scan(message: Message, state: FSMContext):
    await state.clear()
    session_data = db.get_session(message.from_user.id)
    if not session_data:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
    api_id, api_hash, session_string = session_data
    client = await utils.get_userbot_client(message.from_user.id, api_id, api_hash, session_string)
    await message.answer("‚è≥ –°–∫–∞–Ω–∏—Ä—É—é —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã...")
    try:
        dialogs = await client.get_dialogs()
        count = 0
        for d in dialogs:
            if hasattr(d.entity, 'id') and hasattr(d.entity, 'title'):
                db.add_chat(d.entity.id, d.entity.title)
                count += 1
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤: {count}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

@dp.message(Command("addchat"), StateFilter("*"))
async def cmd_addchat(message: Message, state: FSMContext):
    await state.clear()
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addchat <chat_id> <chat_name>")
    try:
        chat_id = int(parts[1])
        chat_name = parts[2]
        dependency = None
        if "–∞–≤–∏—Ç–æ" in chat_name.lower():
            for c_id, c_name, _ in db.get_chats():
                if "–ø—Ä–æ–≥—Ä–µ–≤" in c_name.lower():
                    dependency = c_id
                    break
        db.add_chat(chat_id, chat_name, dependency)
        await message.answer(f"–ß–∞—Ç {chat_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dependency}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("listchats"), StateFilter("*"))
async def cmd_listchats(message: Message, state: FSMContext):
    await state.clear()
    chats = db.get_chats()
    if not chats:
        return await message.answer("–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    text = "\n".join([f"üìç {name} ({chat_id}) -> {dep}" for chat_id, name, dep in chats])
    await message.answer(text)

# === –ê–ù–¢–ò–°–ü–ê–ú: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ ===
last_sent = {}  # {chat_id: datetime}

@dp.message(Command("senddep"), StateFilter("*"))
async def cmd_senddep(message: Message, state: FSMContext):
    await state.clear()
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /senddep <chat_id> <—Ç–µ–∫—Å—Ç>")
    try:
        chat_id = int(parts[1])
        text = parts[2]
        dep = db.get_chat_dependency(chat_id)
        session_data = db.get_session(message.from_user.id)
        if not session_data:
            return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
        api_id, api_hash, session_string = session_data
        client = await utils.get_userbot_client(message.from_user.id, api_id, api_hash, session_string)
        results = []
        # --- –ê–Ω—Ç–∏—Å–ø–∞–º: –∑–∞–¥–µ—Ä–∂–∫–∞ ---
        from datetime import datetime, timedelta
        now = datetime.now()
        global last_sent
        def can_send(cid):
            if cid in last_sent:
                diff = (now - last_sent[cid]).total_seconds()
                return diff >= 120
            return True
        # --- –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–π —á–∞—Ç ---
        if dep:
            if not can_send(dep):
                wait = 120 - (now - last_sent[dep]).total_seconds()
                await message.answer(f"‚è≥ –ñ–¥—É {int(wait)} —Å–µ–∫ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —á–∞—Ç–∞...")
                await asyncio.sleep(wait)
            ok, msg1 = await utils.send_message(client, dep, utils.adaptive_text(text))
            last_sent[dep] = datetime.now()
            db.log_event("SENDDEP_DEP", msg1)
            results.append(f"–ó–∞–≤–∏—Å–∏–º—ã–π —á–∞—Ç: {'‚úÖ' if ok else '‚ùå'}")
        # --- –ü–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ---
        if not can_send(chat_id):
            wait = 120 - (now - last_sent[chat_id]).total_seconds()
            await message.answer(f"‚è≥ –ñ–¥—É {int(wait)} —Å–µ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞...")
            await asyncio.sleep(wait)
        ok2, msg2 = await utils.send_message(client, chat_id, utils.adaptive_text(text))
        last_sent[chat_id] = datetime.now()
        db.log_event("SENDDEP_MAIN", msg2)
        results.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: {'‚úÖ' if ok2 else '‚ùå'}")
        await message.answer("\n".join(results))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ ---
@dp.callback_query(lambda c: c.data == "logout_userbot")
async def logout_userbot_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    db.delete_session(user_id)
    await state.clear()
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ UserBot. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
    await callback.answer("–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="login", description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è UserBot"),
        BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å UserBot"),
        BotCommand(command="join", description="–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ"),
        BotCommand(command="send", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"),
        BotCommand(command="scan", description="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã"),
        BotCommand(command="addchat", description="–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤—Ä—É—á–Ω—É—é"),
        BotCommand(command="listchats", description="–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        BotCommand(command="senddep", description="–†–∞—Å—Å—ã–ª–∫–∞ —Å —É—á—ë—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
    ]
    await bot.set_my_commands(commands)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞...")
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        db.close()